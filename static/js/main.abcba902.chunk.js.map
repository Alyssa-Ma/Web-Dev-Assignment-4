{"version":3,"sources":["components/TableCell.js","components/TableRow.js","components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["TableCell","props","onClick","handleApplyColor","TableRow","cells","i","numCols","push","Table","addRow","setState","state","numRows","addColumn","removeRow","removeCol","fillU","ReactDOM","findDOMNode","grid","current","childNodes","forEach","row","style","backgroundColor","selectedColor","fillAll","document","getElementsByTagName","col","j","background","clearAll","handleColorChange","event","target","value","React","createRef","rows","this","onChange","ref","Component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.abcba902.chunk.js","sourcesContent":["function TableCell(props) {\r\n    return <td onClick={props.handleApplyColor}></td>\r\n  }\r\n  \r\n  export default TableCell;","import TableCell from \"./TableCell\";\r\n\r\nfunction TableRow(props) {\r\n  let cells = [];\r\n  \r\n  for (let i = 0; i < props.numCols; i++) {\r\n    cells.push(<TableCell handleApplyColor={props.handleApplyColor} />)\r\n  }\r\n  \r\n  return <tr>{cells}</tr>\r\n}\r\n\r\nexport default TableRow;\r\n","import React, { Component } from \"react\";\r\nimport TableRow from \"./TableRow\";\r\nimport ReactDOM from 'react-dom';\r\n\r\nclass Table extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      numRows: 1,\r\n      numCols: 1,\r\n      selectedColor: \"red\"\r\n    }\r\n    \r\n    this.grid = React.createRef();\r\n\r\n  }\r\n\r\n  addRow = () => {\r\n    this.setState(state => {\r\n        return {numRows: state.numRows + 1}\r\n    });\r\n  }\r\n\r\n  addColumn = () => {\r\n    this.setState(state => {\r\n        return {numCols: state.numCols + 1}\r\n    });\r\n  }\r\n\r\n  removeRow = () => {\r\n    this.setState(state => {\r\n      return { numRows: state.numRows <= 1 ? 1: state.numRows - 1} //if numRows is greater than or equal to 1\r\n    });\r\n  }\r\n\r\n  removeCol = () => {\r\n    this.setState(state => {\r\n      return {numCols: state.numCols <= 1 ? 1: state.numCols - 1}\r\n    });\r\n  }\r\n\r\n  fillU = () => {\r\n    let table = ReactDOM.findDOMNode(this.grid.current).childNodes;\r\n\r\n    table.forEach(row => {\r\n      for(let i = 0; i < this.state.numCols; i++) {\r\n        let backgroundColor = row.childNodes[i].style.backgroundColor\r\n        \r\n        if(backgroundColor === \"\")\r\n          row.childNodes[i].style.backgroundColor = this.state.selectedColor\r\n          \r\n      }\r\n    });\r\n  }\r\n  \r\n  fillAll = () => {\r\n    let row = document.getElementsByTagName(\"tr\")\r\n    for(const element of row)\r\n    {\r\n      let col = element.getElementsByTagName(\"td\");\r\n      for(let j = 0; j < this.state.numCols; j++)\r\n      {\r\n        col[j].style.background = this.state.selectedColor;\r\n      }\r\n    }\r\n  }\r\n\r\n  clearAll = () => {\r\n    let table = ReactDOM.findDOMNode(this.grid.current).childNodes; //tr = nodes, td = childNodes\r\n    //console.log(table)\r\n    table.forEach(row => { // 1st loop\r\n      for(let i = 0; i < this.state.numCols; i++) { // 2nd loop\r\n        let backgroundColor = row.childNodes[i].style.backgroundColor\r\n        \r\n        if(backgroundColor !== \"\")\r\n          row.childNodes[i].style.backgroundColor = \"\"\r\n          \r\n      }\r\n    });\r\n  }\r\n\r\n  handleColorChange = (event) => {\r\n    this.setState({selectedColor: event.target.value});\r\n  }\r\n\r\n  handleApplyColor = (event) => {\r\n    event.target.style.backgroundColor = this.state.selectedColor;\r\n  }\r\n\r\n  render() {\r\n    let rows = [];\r\n\r\n    for (let i = 0; i < this.state.numRows; i++) {\r\n      rows.push(<TableRow numCols={this.state.numCols} handleApplyColor={this.handleApplyColor} />);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <button onClick={this.addRow}>Add Row</button>\r\n        <button onClick={this.addColumn}>Add Column</button>\r\n        <button onClick={this.removeRow}>Remove Row</button>\r\n        <button onClick={this.removeCol}>Remove Col</button>\r\n        <button onClick={this.fillU}>Fill All Uncolored</button>\r\n        <button onClick={this.fillAll}>Fill All</button>\r\n        <button onClick={this.clearAll}>Clear</button>\r\n        <select onChange={this.handleColorChange}>\r\n          <option value=\"red\">Red</option>\r\n          <option value=\"orange\">Orange</option>\r\n          <option value=\"yellow\">Yellow</option>\r\n          <option value=\"green\">Green</option>\r\n          <option value=\"blue\">Blue</option>\r\n          <option value=\"indigo\">Indigo</option>\r\n          <option value=\"purple\">Purple</option>\r\n        </select>\r\n        <table ref={this.grid}>\r\n          {rows}\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Table;","import React from 'react';\r\nimport './App.css';\r\nimport Table from './components/Table';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Table />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}